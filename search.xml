<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Exception</title>
      <link href="/2020/07/03/Exception/"/>
      <url>/2020/07/03/Exception/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h2><p>导致程序的正常流程被中断的事件，叫做异常</p><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>异常处理常见手段： try catch finally throws</p><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><p>1.将可能抛出FileNotFoundException 文件不存在异常的代码放在try里<br>2.如果文件存在，就会顺序往下执行，并且不执行catch块中的代码<br>3.如果文件不存在，try 里的代码会立即终止，程序流程会运行到对应的catch块中<br>4.e.printStackTrace(); 会打印出方法的调用痕迹.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class TestException &#123;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">         </span><br><span class="line">        File f= new File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line">         </span><br><span class="line">        try&#123;</span><br><span class="line">            System.out.println(<span class="string">"试图打开 d:/LOL.exe"</span>);</span><br><span class="line">            new FileInputStream(f);</span><br><span class="line">            System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        catch(FileNotFoundException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"d:/LOL.exe不存在"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>无论是否出现异常，finally中的代码都会被执行</p><h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><p>考虑如下情况：<br>主方法调用method1<br>method1调用method2<br>method2中打开文件</p><p>method2中需要进行异常处理<br>但是method2不打算处理，而是把这个异常通过throws抛出去<br>那么method1就会接到该异常。 处理办法也是两种，要么是try catch处理掉，要么也是抛出去。<br>method1选择本地try catch住 一旦try catch住了，就相当于把这个异常消化掉了，主方法在调用method1的时候，就不需要进行异常处理了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class TestException &#123;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        method1();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    private static void <span class="function"><span class="title">method1</span></span>() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            method2();</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            // TODO Auto-generated catch block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    private static void method2() throws FileNotFoundException &#123;</span><br><span class="line"> </span><br><span class="line">        File f = new File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">"试图打开 d:/LOL.exe"</span>);</span><br><span class="line">        new FileInputStream(f);</span><br><span class="line">        System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><h3 id="可查异常"><a href="#可查异常" class="headerlink" title="可查异常"></a>可查异常</h3><p>可查异常即必须进行处理的异常，要么try catch住,要么往外抛，谁调用，谁处理</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class TestException &#123;</span><br><span class="line">  </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">          </span><br><span class="line">        File f= new File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line">          </span><br><span class="line">        try&#123;</span><br><span class="line">            System.out.println(<span class="string">"试图打开 d:/LOL.exe"</span>);</span><br><span class="line">            new FileInputStream(f);</span><br><span class="line">            System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        catch(FileNotFoundException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"d:/LOL.exe不存在"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h3><p>运行时异常RuntimeException指： 不是必须进行try catch的异常<br>常见运行时异常:<br>除数不能为0异常:ArithmeticException<br>下标越界异常:ArrayIndexOutOfBoundsException<br>空指针异常:NullPointerException<br>在编写代码的时候，依然可以使用try catch throws进行处理，与可查异常不同之处在于，即便不进行try catch，也不会有编译错误</p><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>错误Error，指的是系统级别的异常，通常是内存用光了<br>在默认设置下，一般java程序启动的时候，最大可以使用16m的内存</p><h2 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h2><p>Throwable是类，Exception和Error都继承了该类<br>所以在捕捉的时候，也可以使用Throwable进行捕捉</p><p><img src= "/img/loading.gif" data-src="https://stepimagewm.how2j.cn/742.png" alt></p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/02/hello-world/"/>
      <url>/2020/07/02/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
