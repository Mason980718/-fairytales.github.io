<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>看板娘</title>
      <link href="/2020/07/03/jc/"/>
      <url>/2020/07/03/jc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>hexo的官方是支持看板娘的，已经封装好了插件，但只是模型，不能说话、不能换装、功能较少。</p></blockquote><h1 id="普通版"><a href="#普通版" class="headerlink" title="普通版"></a>普通版</h1><ol><li>安装模块</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><ol start="2"><li>在主题配置文件添加以下内容</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="comment">## https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line">live2d:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># enable: false</span></span><br><span class="line">  scriptFrom: <span class="built_in">local</span> <span class="comment"># 默认</span></span><br><span class="line">  pluginRootPath: live2dw/ <span class="comment"># 插件在站点上的根目录(相对路径)</span></span><br><span class="line">  pluginJsPath: lib/ <span class="comment"># 脚本文件相对与插件根目录路径</span></span><br><span class="line">  pluginModelPath: assets/ <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line">  <span class="comment"># scriptFrom: jsdelivr # jsdelivr CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: unpkg # unpkg CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span></span><br><span class="line">  tagMode: <span class="literal">false</span> <span class="comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span></span><br><span class="line">  debug: <span class="literal">false</span> <span class="comment"># 调试, 是否在控制台输出日志</span></span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-z16 <span class="comment"># npm-module package name</span></span><br><span class="line">    <span class="comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko # 相对于博客根目录的路径</span></span><br><span class="line">    <span class="comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">true</span> <span class="comment"># 手机中是否展示</span></span><br></pre></td></tr></table></figure><ol start="3"><li>进入博客根目录输入以下命令：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install live2d-widget-model-z16</span><br></pre></td></tr></table></figure><div class="note danger">            <p>确保安装的模型与model.use一致</p>          </div><blockquote><p>以上model.use就是看板娘模型，更多模型转至<a href="https://blog.csdn.net/wang_123_zy/article/details/87181892" target="_blank" rel="noopener">模型</a></p></blockquote><h1 id="大神版"><a href="#大神版" class="headerlink" title="大神版"></a>大神版</h1><blockquote><p>大神作品，功能齐全。能说话、能换装、能玩游戏、能拍照、还能自定义</p></blockquote><ol><li>下载<a href="https://pan.baidu.com/s/1-dMalNL_j8fSYEtV80IxVw" target="_blank" rel="noopener">项目</a>，提取码：xwpg，解压到本地博客目录的 <code>themes/butterfly/source</code>下，修改文件夹名为 <code>live2d-widget</code>，修改项目中的 <code>autoload.js</code> 文件，如下：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const live2d_path = <span class="string">"https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/"</span>;</span><br></pre></td></tr></table></figure><p>   改为</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const live2d_path = <span class="string">"/live2d-widget/"</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>/themes/butterfly/layout/head.pug</code>里添加如下内容：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"/live2d-widget/autoload.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>放在<code>head.pug</code>中<code>title</code>标签下面</p></blockquote><ol start="3"><li>在主题配置文件，添加以下内容：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="4"><li>想修改看板娘大小、位置、格式、文本内容等，可查看并修改 <code>waifu-tips.js</code> 、 <code>waifu-tips.json</code> 和 <code>waifu.css</code>。</li></ol><ol start="5"><li>大神的项目需要 <code>jQuery</code> 和 <code>font-awesom</code> 支持，需要在<code>/themes/butterfly/layout/layout.pug</code>中<code>head</code>下添加如下：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css"</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Exception</title>
      <link href="/2020/07/03/Exception/"/>
      <url>/2020/07/03/Exception/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h2><p>导致程序的正常流程被中断的事件，叫做异常</p><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>异常处理常见手段： try catch finally throws</p><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><p>1.将可能抛出FileNotFoundException 文件不存在异常的代码放在try里<br>2.如果文件存在，就会顺序往下执行，并且不执行catch块中的代码<br>3.如果文件不存在，try 里的代码会立即终止，程序流程会运行到对应的catch块中<br>4.e.printStackTrace(); 会打印出方法的调用痕迹.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class TestException &#123;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">         </span><br><span class="line">        File f= new File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line">         </span><br><span class="line">        try&#123;</span><br><span class="line">            System.out.println(<span class="string">"试图打开 d:/LOL.exe"</span>);</span><br><span class="line">            new FileInputStream(f);</span><br><span class="line">            System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        catch(FileNotFoundException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"d:/LOL.exe不存在"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>无论是否出现异常，finally中的代码都会被执行</p><h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><p>考虑如下情况：<br>主方法调用method1<br>method1调用method2<br>method2中打开文件</p><p>method2中需要进行异常处理<br>但是method2不打算处理，而是把这个异常通过throws抛出去<br>那么method1就会接到该异常。 处理办法也是两种，要么是try catch处理掉，要么也是抛出去。<br>method1选择本地try catch住 一旦try catch住了，就相当于把这个异常消化掉了，主方法在调用method1的时候，就不需要进行异常处理了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class TestException &#123;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        method1();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    private static void <span class="function"><span class="title">method1</span></span>() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            method2();</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            // TODO Auto-generated catch block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    private static void method2() throws FileNotFoundException &#123;</span><br><span class="line"> </span><br><span class="line">        File f = new File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">"试图打开 d:/LOL.exe"</span>);</span><br><span class="line">        new FileInputStream(f);</span><br><span class="line">        System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><h3 id="可查异常"><a href="#可查异常" class="headerlink" title="可查异常"></a>可查异常</h3><p>可查异常即必须进行处理的异常，要么try catch住,要么往外抛，谁调用，谁处理</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class TestException &#123;</span><br><span class="line">  </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">          </span><br><span class="line">        File f= new File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line">          </span><br><span class="line">        try&#123;</span><br><span class="line">            System.out.println(<span class="string">"试图打开 d:/LOL.exe"</span>);</span><br><span class="line">            new FileInputStream(f);</span><br><span class="line">            System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        catch(FileNotFoundException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"d:/LOL.exe不存在"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h3><p>运行时异常RuntimeException指： 不是必须进行try catch的异常<br>常见运行时异常:<br>除数不能为0异常:ArithmeticException<br>下标越界异常:ArrayIndexOutOfBoundsException<br>空指针异常:NullPointerException<br>在编写代码的时候，依然可以使用try catch throws进行处理，与可查异常不同之处在于，即便不进行try catch，也不会有编译错误</p><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>错误Error，指的是系统级别的异常，通常是内存用光了<br>在默认设置下，一般java程序启动的时候，最大可以使用16m的内存</p><h2 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h2><p>Throwable是类，Exception和Error都继承了该类<br>所以在捕捉的时候，也可以使用Throwable进行捕捉</p><p><img src= "/img/loading.gif" data-src="https://stepimagewm.how2j.cn/742.png" alt></p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
